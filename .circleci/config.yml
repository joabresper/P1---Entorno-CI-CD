version: 2.1

node_image: &node_image cimg/node:22.12.0

imports:
  - .circleci/terraform.yml

orbs:
  discord: antonioned/discord@0.1.0
  sonarcloud: sonarsource/sonarcloud@3.0

parameters:
  tag:
    type: string
    default: ""

jobs:
  create-environment:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - run: node --version
      - run:
          name: Install dependencies
          command: npm install
      - discord/status:
          fail_only: true
          webhook: "${DISCORD_WEBHOOK}"
          failure_message: "**❌ Falló la creación del entorno.** Revisá los pasos de instalación.\\n\\nUsuario: **${CIRCLE_USERNAME}**"

  test-backend:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Run tests
          command: npm test
      - discord/status:
          webhook: "${DISCORD_WEBHOOK}"
          success_message: "**✅ Pruebas de backend exitosas!**\\n\\nUsuario: **${CIRCLE_USERNAME}**"
          failure_message: "**❌ Las pruebas de backend fallaron.** Revisá los resultados.\\n\\nUsuario: **${CIRCLE_USERNAME}**"

  discord-notification:
    docker:
      - image: cimg/base:stable
    parameters:
      success_message:
        type: string
        default: ""
      failure_message:
        type: string
        default: ""
      webhook:
        type: string
      exit_code:
        type: integer
        default: 0
    steps:
      - run:
          name: forzar salida
          command: exit << parameters.exit_code >>
      - discord/status:
          webhook: "<< parameters.webhook >>" 
          success_message: "<< parameters.success_message >>"
          failure_message: "<< parameters.failure_message >>"

  move-trello-card:
    docker:
      - image: cimg/base:stable
    parameters:
      trello_list:
        type: string
      message:
        type: string
        default: "el pipeline"
    steps:
      - checkout
      - run:
          name: Move card to trello errors list 
          command: |
            COMMIT_MSG=$(git log -1 --pretty=%B)
            CARD_SHORT_ID=$(echo "$COMMIT_MSG" | sed -n 's/.*\[\([^]]*\)\].*/\1/p')
            AUTHOR=$(git log -1 --pretty='%an')
            curl -s -X PUT "https://api.trello.com/1/cards/${CARD_SHORT_ID}?idList=${<< parameters.trello_list >>}&key=${TRELLO_API_KEY}&token=${TRELLO_SECRET_TOKEN}"
            
            if [ << parameters.trello_list >> == "TRELLO_ERRORS_LIST_ID" ]; then
              TEXT="CircleCI detectó un error en << parameters.message >> | GitHubUser: ${AUTHOR}"
              ENCODED_TEXT=$(printf "%s" "${TEXT}" | jq -sRr @uri)

              curl --request POST \
                --url "https://api.trello.com/1/cards/${CARD_SHORT_ID}/actions/comments?text=${ENCODED_TEXT}&key=${TRELLO_API_KEY}&token=${TRELLO_SECRET_TOKEN}" \
                --header 'Accept: application/json'
            fi

  deploy:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Deploy in Render
          command: |
            curl -X POST "$RENDER_DEPLOY_HOOK_URL"
      - run:
          name: Check deploy
          command: |
            sleep 60

            for i in {1..10}; do
              if curl -sSf ${RENDER_APP_URL} > /dev/null; then
                echo "Sitio activo"
                break
              fi
              echo "Esperando que el sitio esté disponible..."
              sleep 5
            done

            STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${RENDER_APP_URL})
            if [ "$STATUS" -ne 200 ]; then
              echo "El sitio no está activo. Código de estado: $STATUS"
              exit 1
            fi
      - discord/status:
          webhook: "${DISCORD_WEBHOOK}"
          success_message: "**✅ Se realizó correctamente el deploy!**"
          failure_message: "**❌ Falló el deploy.**"

  check-deploy-status:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Check deploy status
          command: |
            for i in {1..10}; do
              if curl -sSf ${RENDER_APP_URL} > /dev/null; then
                echo "Sitio activo"
                break
              fi
              echo "Esperando que el sitio esté disponible..."
              sleep 5
            done
  
  bombardier-test:
    docker:
      - image: cimg/base:stable
    parameters:
      url:
        type: string
        default: ""
      connections:
        type: integer
        default: 100
      requests:
        type: integer
        default: 10
    steps:
      - attach_workspace:
          at: infra
      - run:
          name: Install Bombardier
          command: |
            curl -L https://github.com/codesenberg/bombardier/releases/download/v1.2.5/bombardier-linux-amd64 -o bombardier
            chmod +x bombardier
            sudo mv bombardier /usr/local/bin/
            echo "Bombardier installed successfully"
      - run:
          name: Run concurrency test with Bombardier
          command: |
            export EC2_IP=$(cat infra/ec2_ip.txt)

            bombardier -c << parameters.connections >> -n << parameters.requests >> http://${EC2_IP}:3000 > output.txt
            cat output.txt
            if grep -qE "4xx - [1-9]|5xx - [1-9]" output.txt; then
              echo "Se detectaron errores HTTP"
              exit 1
            fi
            if grep -q "the server closed connection before returning the first response byte" output.txt; then
              echo "Se detectaron errores de conexión prematura"
              exit 1
            fi
      - discord/status:
          webhook: "${DISCORD_WEBHOOK}"
          success_message: "**✅ Prueba de concurrencia completada con éxito!**\\nNo hubo errores HTTP!"
          failure_message: "**❌ La prueba de concurrencia falló.**\\nHubo errores HTTP. Revisá los resultados."
  
  sonarcloud:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - sonarcloud/scan
      - run:
          name: Check SonarCloud Quality Gate status
          command: |
            response=$(curl -s -u ${SONAR_TOKEN}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}")
            status=$(echo $response | jq -r '.projectStatus.status')
            echo "Quality Gate status: $status"
            echo "export QUALITY_GATE_STATUS=$status" > status.env

            if [ "$status" != "OK" ]; then
              echo "Quality Gate failed!"
              exit 1
            fi
      - run:
          name: Load Quality Gate status
          command: |
            source status.env
            echo "Status loaded: $QUALITY_GATE_STATUS"
      - discord/status:
          webhook: "${DISCORD_WEBHOOK}"
          success_message: "**✅ SonarCloud análisis completado con éxito!**\\nLa calidad del código es buena!"
          failure_message: "**❌ SonarCloud análisis falló.**\\nRevisá los resultados de la calidad del código." 
  
  pull-request:
    parameters:
      message:
        type: string
        default: ""
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Create Pull Request from develop to main
          command: |
            curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls \
              -d "{\"title\": \"Auto PR: ${CIRCLE_BRANCH:-develop} → main | ${CIRCLE_TAG}\", \"head\": \"${CIRCLE_BRANCH:-develop}\", \"base\": \"main\", \"body\": \"Auto PR - << parameters.message >> Fusionando cambios de ${CIRCLE_BRANCH:-develop} a main.\"}"

  plan-apply:
    working_directory: ~/project
    parameters:
      environment:
        type: string        
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd infra
            export TF_WORKSPACE="${CIRCLE_BRANCH:-develop}"
            terraform init -input=false
            terraform plan -out tfapply -var-file=terraform.tfvars -var="environment=<< parameters.environment >>" -var="dev_id=${CIRCLE_WORKFLOW_ID}"
      - persist_to_workspace:
          root: infra
          paths:
            - .

  apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: infra
      - run:
          name: terraform apply
          command: |
            cd infra
            export TF_WORKSPACE="${CIRCLE_BRANCH:-develop}"
            terraform apply -auto-approve tfapply
      - run:
          name: terraform output
          command: |
            cd infra
            export TF_WORKSPACE="${CIRCLE_BRANCH:-develop}"
            terraform output -raw ec2_public_ip > ec2_ip.txt
      - persist_to_workspace:
          root: infra
          paths:
            - .
  
  apply-directly:
    parameters:
      environment:
        type: string   
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform apply directly
          command: |
            cd infra
            export TF_WORKSPACE="${CIRCLE_BRANCH:-develop}"
            terraform init -input=false
            terraform apply -auto-approve -var-file=terraform.tfvars -var="environment=<< parameters.environment >>" -var="dev_id=${CIRCLE_WORKFLOW_ID}"
      - run:
          name: terraform output
          command: |
            cd infra
            export TF_WORKSPACE="${CIRCLE_BRANCH:-develop}"
            terraform output -raw ec2_public_ip > ec2_ip.txt
      - persist_to_workspace:
          root: infra
          paths:
            - .

  plan-destroy:
    parameters:
      environment:
        type: string
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: infra
      - run:
          name: terraform create destroy plan
          command: |
            cd infra
            export TF_WORKSPACE="${CIRCLE_BRANCH:-develop}"
            terraform plan -destroy -out tfdestroy -var-file=terraform.tfvars -var="environment=<< parameters.environment >>" -var="dev_id=${CIRCLE_WORKFLOW_ID}"
      - persist_to_workspace:
          root: infra
          paths:
            - .
 
  destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: infra
      - run:
          name: terraform destroy
          command: |
            cd infra
            export TF_WORKSPACE="${CIRCLE_BRANCH:-develop}"
            terraform apply -auto-approve tfdestroy

  destroy-directly:
    parameters:
      environment:
        type: string   
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: infra
      - run:
          name: terraform destroy directly
          command: |
            cd infra
            export TF_WORKSPACE="${CIRCLE_BRANCH:-develop}"
            terraform destroy -auto-approve -var-file=terraform.tfvars -var="environment=<< parameters.environment >>" -var="dev_id=${CIRCLE_WORKFLOW_ID}"
  
  deploy-aws:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: infra
      - run:
          name: Deploy en EC2
          command: |
            echo "${EC2_SSH_PRIVATE_KEY}" | sed 's/\\n/\n/g' > key.pem
            chmod 600 key.pem

            export EC2_IP=$(cat infra/ec2_ip.txt)

            until nc -zvw5 ${EC2_IP} 22; do
              sleep 5
              echo "Reintentando conexión SSH..."
            done

            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts

            ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${EC2_IP} \<< EOF
              sudo apt update
              sudo apt install -y git nodejs npm
              git clone https://github.com/joabresper/P1---Entorno-CI-CD.git
              cd P1---Entorno-CI-CD
              npm install
              nohup npm start > output.log 2>&1 &
            EOF
            echo "Despliegue completado en: http://${EC2_IP}:3000"


workflows:
  # dev-full-pipeline:
  #   jobs:
  #     - create-environment:
  #         filters: &filters-dev
  #           branches:
  #             only: develop
  #           tags:
  #             only: /^v.*/
  #     - test-backend:
  #         requires:
  #           - create-environment
  #         filters:
  #           <<: *filters-dev
  #     - move-trello-card:
  #         trello_list: "TRELLO_ERRORS_LIST_ID"
  #         message: "Pruebas"
  #         requires:
  #           - test-backend:
  #             - failed
  #         filters:
  #           <<: *filters-dev
  #     - sonarcloud:
  #         requires:
  #           - test-backend
  #         filters:
  #           <<: *filters-dev
  #     - move-trello-card:
  #         trello_list: "TRELLO_ERRORS_LIST_ID"
  #         requires:
  #           - sonarcloud:
  #             - failed
  #         filters:
  #           <<: *filters-dev
  #     - move-trello-card:
  #         trello_list: "TRELLO_DONE_LIST_ID"
  #         requires:
  #           - sonarcloud
  #         filters:
  #           <<: *filters-dev
  #     - apply-directly:
  #         environment: "develop"
  #         requires:
  #           - sonarcloud
  #         filters:
  #           <<: *filters-dev
  #     - deploy-aws:
  #         requires:
  #           - apply-directly
  #         filters:
  #           <<: *filters-dev
  #     - bombardier-test:
  #         requires:
  #           - deploy-aws
  #         connections: 1000
  #         requests: 1000
  #         filters:
  #           <<: *filters-dev
  #     - destroy-directly:
  #         environment: "develop"
  #         requires:
  #           - bombardier-test:
  #             - failed
  #             - success
  #         filters:
  #           <<: *filters-dev
  #     - pull-request:
  #         message: "Develop pipeline completado con exito"
  #         requires:
  #           - bombardier-test
  #         filters:
  #           branches:
  #             ignore: /.*/
  #           tags:
  #             only: /^v.*/
  #     - discord-notification:
  #         webhook: "${DISCORD_WEBHOOK}"
  #         failure_message: "**❌ Fallo en las pruebas de despliegue**"
  #         exit_code: 1
  #         filters:
  #           <<: *filters-dev
  #         requires:
  #           - apply-directly:
  #             - failed
  #           - deploy-aws:
  #             - failed
  #           - destroy-directly:
  #             - failed

  # infra-changes: 
  #   jobs:
  #     - plan-apply:
  #         environment: "infra"
  #         filters: &filters-infra
  #           branches:
  #             only: infra
  #     - discord-notification:
  #         webhook: "${DISCORD_INFRA_WEBHOOK}"
  #         failure_message: "**❌ Falló el plan de infraestructura.**"
  #         exit_code: 1
  #         requires:
  #           - plan-apply:
  #             - failed
  #           - apply:
  #             - failed
  #           - plan-destroy:
  #             - failed
  #           - destroy:
  #             - failed
  #         filters:
  #           <<: *filters-infra
  #     - apply:
  #         requires:
  #           - plan-apply
  #         filters:
  #           <<: *filters-infra
  #     - plan-destroy:
  #         environment: "infra"
  #         requires:
  #           - apply
  #         filters:
  #           <<: *filters-infra
  #     - destroy:
  #         requires:
  #           - plan-destroy
  #         filters:
  #           <<: *filters-infra
  #     - discord-notification:
  #         webhook: "${DISCORD_INFRA_WEBHOOK}"
  #         success_message: "**✅ Infraestructura aws creada y probada exitosamente!**\\nYa puede ser implementada en producción."
  #         requires:
  #           - destroy
  #         filters:
  #           <<: *filters-infra
  #     - pull-request:
  #         message: "Infraestructura pipeline completado con exito"
  #         requires:
  #           - destroy
  #         filters:
  #           <<: *filters-infra

  main-pipeline:
    jobs:
      - plan-apply:
          environment: "production"
          filters: &filters-main
            branches:
              only: main
      - apply:
          requires:
            - plan-apply
          filters:
            <<: *filters-main
      - deploy-aws:
          requires:
            - apply
          filters:
            <<: *filters-main
      - discord-notification:
          webhook: "${DISCORD_DEPLOY_WEBHOOK}"
          success_message: "**✅ Deploy en producción completado exitosamente!**"
          requires:
            - deploy-aws
      - discord-notification:
          webhook: "${DISCORD_DEPLOY_WEBHOOK}"
          failure_message: "**❌ Falló el deploy en producción.**"
          exit_code: 1
          requires:
            - plan-apply:
              - failed
            - apply:
              - failed
            - deploy-aws:
              - failed
            

  # tf-test:
  #   jobs:
  #     - apply-directly
  #     - deploy-aws:
  #         requires:
  #           - apply-directly
  #     - bombardier-test:
  #         requires:
  #           - deploy-aws
  #         connections: 10000
  #         requests: 100000
  #     - destroy-directly:
  #         requires:
  #           - bombardier-test:
  #             - failed
  #             - success

  # bombardier-pass:
  #   jobs:
  #     - bombardier-test

  # bombardier-test-fail:
  #   when:
  #     equal: [develop, << pipeline.git.branch >>]
  #   jobs:
  #     - bombardier-test:
  #         connections: 1000000
  #         requests: 1000000
  
  # sonar-test:
  #   jobs:
  #     - sonarcloud
      
