version: 2.1

orbs:
  discord: antonioned/discord@0.1.0

jobs:
  create-environment:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - run: node --version
      - run:
          name: Install dependencies
          command: npm install
      - discord/status:
          fail_only: true
          webhook: "${DISCORD_WEBHOOK}"
          failure_message: "**❌ Falló la creación del entorno.** Revisá los pasos de instalación.\\n\\nUsuario: **${CIRCLE_USERNAME}**"

  run-tests:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Run tests
          command: npm test
      - discord/status:
          webhook: "${DISCORD_WEBHOOK}"
          success_message: "**✅ Pruebas completadas con éxito!** Todo salió bien!\\n\\nUsuario: **${CIRCLE_USERNAME}**"
          failure_message: "**❌ Las pruebas fallaron.** Revisá los resultados.\\n\\nUsuario: **${CIRCLE_USERNAME}**"
  
  done-trello-card:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Move to done trello card
          command: |
            COMMIT_MSG=$(git log -1 --pretty=%B)

            CARD_ID=$(curl -s "https://api.trello.com/1/boards/${TRELLO_BOARD_ID}/cards/all?key=${TRELLO_API_KEY}&token=${TRELLO_SECRET_TOKEN}" \
              | jq -r --arg msg "${COMMIT_MSG}" '.[] | select(.name | contains($msg)) | .id' \
              | head -n 1)

            curl -s -X PUT "https://api.trello.com/1/cards/${CARD_ID}?idList=${TRELLO_DONE_LIST_ID}&key=${TRELLO_API_KEY}&token=${TRELLO_SECRET_TOKEN}"
      # - discord/status:
      #     webhook: "${DISCORD_TRELLO_WEBHOOK}"
      #     failure_message: "Targeta \"**$(COMMIT_MSG)**\" no entontrada. No se pudo mover a Hecho en el tablero."

  deploy:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Deploy in Render
          command: |
            curl -X POST "$RENDER_DEPLOY_HOOK_URL"
      - discord/status:
          webhook: "${DISCORD_WEBHOOK}"
          success_message: "**✅ Se inicio correctamente el deploy!**"
          failure_message: "**❌ Fallo en la inicializacion del deploy.**"
  
  check-deploy-status:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Check deploy status
          command: |
            for i in {1..10}; do
              if curl -sSf ${RENDER_APP_URL} > /dev/null; then
                echo "Sitio activo"
                break
              fi
              echo "Esperando que el sitio esté disponible..."
              sleep 5
            done
  
  bombardier-test:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Install Bombardier
          command: |
            curl -L https://github.com/codesenberg/bombardier/releases/download/v1.2.5/bombardier-linux-amd64 -o bombardier
            chmod +x bombardier
            sudo mv bombardier /usr/local/bin/
            echo "Bombardier installed successfully"
      - run:
          name: Run concurrency test with Bombardier
          command: |
            bombardier -c 500 -n 1000 ${RENDER_APP_URL} > output.txt
            cat output.txt
            if grep -qE "4xx - [1-9]|5xx - [1-9]" output.txt; then
              exit 1
            fi
      - discord/status:
          webhook: "${DISCORD_WEBHOOK}"
          success_message: "**✅ Prueba de carga pesada completada con éxito!**\\nNo hubo errores HTTP!"
          failure_message: "**❌ La prueba de carga pesada falló.**\\nHubo errores HTTP. Revisá los resultados."

workflows:
  my-test:
    jobs:
      # - create-environment
      - run-tests
      #     requires:
      #       - create-environment
      - deploy:
          requires:
            - run-tests
      # - done-trello-card
          # requires:
          #   - run-tests
      - check-deploy-status:
          requires:
            - deploy
      - bombardier-test:
          requires:
            - check-deploy-status