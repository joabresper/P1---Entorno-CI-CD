version: 2.1

node_image: &node_image cimg/node:22.12.0

orbs:
  discord: antonioned/discord@0.1.0
  sonarcloud: sonarsource/sonarcloud@3.0

jobs:
  create-environment:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - run: node --version
      - run:
          name: Install dependencies
          command: npm install
      - discord/status:
          fail_only: true
          webhook: "${DISCORD_WEBHOOK}"
          failure_message: "**❌ Falló la creación del entorno.** Revisá los pasos de instalación.\\n\\nUsuario: **${CIRCLE_USERNAME}**"

  run-tests:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Run tests
          command: npm test
      - discord/status:
          webhook: "${DISCORD_WEBHOOK}"
          success_message: "**✅ Pruebas completadas con éxito!** Todo salió bien!\\n\\nUsuario: **${CIRCLE_USERNAME}**"
          failure_message: "**❌ Las pruebas fallaron.** Revisá los resultados.\\n\\nUsuario: **${CIRCLE_USERNAME}**"

  move-trello-card:
    docker:
      - image: cimg/base:stable
    parameters:
      trello_list:
        type: string
      message:
        type: string
        default: "el pipeline"
    steps:
      - checkout
      - run:
          name: Move card to trello errors list 
          command: |
            COMMIT_MSG=$(git log -1 --pretty=%B)
            CARD_SHORT_ID=$(echo "$COMMIT_MSG" | sed -n 's/.*\[\([^]]*\)\].*/\1/p')
            AUTHOR=$(git log -1 --pretty='%an')
            curl -s -X PUT "https://api.trello.com/1/cards/${CARD_SHORT_ID}?idList=${<< parameters.trello_list >>}&key=${TRELLO_API_KEY}&token=${TRELLO_SECRET_TOKEN}"
            
            if [ << parameters.trello_list >> == "TRELLO_ERRORS_LIST_ID" ]; then
              TEXT="CircleCI detectó un error en << parameters.message >> | GitHubUser: ${AUTHOR}"
              ENCODED_TEXT=$(printf "%s" "${TEXT}" | jq -sRr @uri)

              curl --request POST \
                --url "https://api.trello.com/1/cards/${CARD_SHORT_ID}/actions/comments?text=${ENCODED_TEXT}&key=${TRELLO_API_KEY}&token=${TRELLO_SECRET_TOKEN}" \
                --header 'Accept: application/json'
            fi

  deploy:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Deploy in Render
          command: |
            curl -X POST "$RENDER_DEPLOY_HOOK_URL"
      - run:
          name: Check deploy
          command: |
            sleep 60

            for i in {1..10}; do
              if curl -sSf ${RENDER_APP_URL} > /dev/null; then
                echo "Sitio activo"
                break
              fi
              echo "Esperando que el sitio esté disponible..."
              sleep 5
            done

            STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${RENDER_APP_URL})
            if [ "$STATUS" -ne 200 ]; then
              echo "El sitio no está activo. Código de estado: $STATUS"
              exit 1
            fi
      - discord/status:
          webhook: "${DISCORD_WEBHOOK}"
          success_message: "**✅ Se realizó correctamente el deploy!**"
          failure_message: "**❌ Falló el deploy.**"

  check-deploy-status:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Check deploy status
          command: |
            for i in {1..10}; do
              if curl -sSf ${RENDER_APP_URL} > /dev/null; then
                echo "Sitio activo"
                break
              fi
              echo "Esperando que el sitio esté disponible..."
              sleep 5
            done
  
  bombardier-test:
    docker:
      - image: cimg/base:stable
    parameters:
      connections:
        type: integer
        default: 100
      requests:
        type: integer
        default: 10
    steps:
      - run:
          name: Install Bombardier
          command: |
            curl -L https://github.com/codesenberg/bombardier/releases/download/v1.2.5/bombardier-linux-amd64 -o bombardier
            chmod +x bombardier
            sudo mv bombardier /usr/local/bin/
            echo "Bombardier installed successfully"
      - run:
          name: Run concurrency test with Bombardier
          command: |
            bombardier -c << parameters.connections >> -n << parameters.requests >> ${RENDER_APP_URL} > output.txt
            cat output.txt
            if grep -qE "4xx - [1-9]|5xx - [1-9]" output.txt; then
              exit 1
            fi
      - discord/status:
          webhook: "${DISCORD_WEBHOOK}"
          success_message: "**✅ Prueba de concurrencia completada con éxito!**\\nNo hubo errores HTTP!"
          failure_message: "**❌ La prueba de concurrencia falló.**\\nHubo errores HTTP. Revisá los resultados."
  
  sonarcloud:
    docker:
      - image: cimg/node:22.12.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - sonarcloud/scan
      - run:
          name: Check SonarCloud Quality Gate status
          command: |
            response=$(curl -s -u ${SONAR_TOKEN}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}")
            status=$(echo $response | jq -r '.projectStatus.status')
            echo "Quality Gate status: $status"
            echo "export QUALITY_GATE_STATUS=$status" > status.env

            if [ "$status" != "OK" ]; then
              echo "Quality Gate failed!"
              exit 1
            fi
      - run:
          name: Load Quality Gate status
          command: |
            source status.env
            echo "Status loaded: $QUALITY_GATE_STATUS"
      - discord/status:
          webhook: "${DISCORD_WEBHOOK}"
          success_message: "**✅ SonarCloud análisis completado con éxito!**\\nLa calidad del código es buena!"
          failure_message: "**❌ SonarCloud análisis falló.**\\nRevisá los resultados de la calidad del código." 
  
  pull-request:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Create Pull Request from develop to main
          command: |
            curl -X POST -H "Authorization: token ${GITHUB_TOKEN}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls \
              -d '{
                "title": "Auto PR: develop → main",
                "head": "develop",
                "base": "main",
                "body": "Auto PR - Develop pipeline completed successfully. Merging changes from develop to main.",
              }'

workflows:
  dev-full-pipeline:
    when:
      equal: [develop, << pipeline.git.branch >>]
    jobs:
      - create-environment
      - run-tests:
          requires:
            - create-environment
      - move-trello-card:
          trello_list: "TRELLO_ERRORS_LIST_ID"
          message: "Pruebas"
          requires:
            - run-tests:
              - failed
      - sonarcloud:
          requires:
            - run-tests
      - move-trello-card:
          trello_list: "TRELLO_ERRORS_LIST_ID"
          requires:
            - sonarcloud:
              - failed
      - deploy:
          requires:
            - sonarcloud
      - move-trello-card:
          trello_list: "TRELLO_DONE_LIST_ID"
          requires:
            - sonarcloud
      - check-deploy-status:
          requires:
            - deploy
      - bombardier-test:
          requires:
            - check-deploy-status
          # connections: 10000
          # requests: 100000
      - pull-request:
          requires:
            - bombardier-test

  bombardier-pass:
    jobs:
      - bombardier-test

  # bombardier-test-fail:
  #   when:
  #     equal: [develop, << pipeline.git.branch >>]
  #   jobs:
  #     - bombardier-test:
  #         connections: 1000000
  #         requests: 1000000
  
#   main-full-pipeline:
#     when:
#       equal: [main, << pipeline.git.branch >>]
#     jobs:
      
